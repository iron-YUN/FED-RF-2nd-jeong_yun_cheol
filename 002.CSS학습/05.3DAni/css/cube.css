@charset "utf-8";
/* 큐브 애니메이션 CSS - cube.css */

html,
body {
  margin: 0;
  padding: 0;
}
body {
  background-image: linear-gradient(to bottom, #4dffc3, #51d3ff);
  height: 100vh;
}
/* CSS 변수셋팅 
 :root 의미는? -> html:root
 html요소가 생략되어 표현된것
 ->변수값 변경 애니가 필요한경우 이점을 활용한다!
  html.클래스명:root{변수값셋팅}
  ->변수값이 특정 클래스로 변경가능!*/
:root {
  /* 큐브공통크기 */
  --cube-size: 300px;
  /* Z축 거리 나눔수 */
  --divide-num: 2;
}
/* root인 html요소에 클래스를 부여하여 변수값을 변경한다! */
html.on:root {
  --divide-num: 1.5;
}

/* 작동버튼 */
.btngo {
  position: fixed;
  top: 5%;
  left: 50%;
  transform: translateX(-50%);
  font-size: 40px;
  border-radius: 10px;
  cursor: pointer;
}
/* 버튼 오버시 */
.btngo:hover {
  background-color: lime;
}

/* 큐브 */
.cube {
  position: absolute;
  /* 정가운데 정렬
    50% 밀고 박스의 절반크기 빼기 */
  top: calc(50% - var(--cube-size) / 2);
  left: calc(50% - var(--cube-size) / 2);
  width: var(--cube-size);
  height: var(--cube-size);
  /* outline: 2px solid red; */
  /********************************************
        [입체로 설정하기]
        -입체로 설정할 요소의 부모박스에 아래와 같이 설정해준다!
        (부모는 싸고있는 요소)
        transform-style: 속성값은 아래 2가지
        1. flat (기본값) : 2D
        2. preserver-3D : 3D ,> 이값으로 설정함
    ********************************************/
  transform-style: preserve-3d;
  /* 입체를 잘보이게 약간 회전함*/
  transform: rotateX(10deg) rotateY(30deg);
}
/* 큐브각면 공통 */
.cube span {
  position: absolute;
  /* 앱솔루트는 자동 block */
  width: 100%;
  height: 100%;
  /* outline: 2px solid blue;     */
  opacity: 0.8;

  /* 테두리 */
  border: 2px solid #ccc;
  /* 보더패딩 포함박스 */
  box-sizing: border-box;

  /* z축거리 변경에대한 트랜지션 애니설정 */
  transition: .3s ease-in-out;   /*****************중요함****************************/
}
/* 1. 앞면 서울 */
.cube span:nth-child(1) {
  /* 배경이미지 */
  background: url(../images/seoulCity.jpg) no-repeat center/cover;
  /* 화면방향 z축 이동 translateZ 속성을 사용
    양의 값은 앞쪽 , 음의값은 뒷쪽*/
  transform: translateZ(calc(var(--cube-size) / var(--divide-num)));
  /* 큐브의 앞쪽이동은 큐브 크기의 절반 */
}

/* 2.오른쪽면 뉴욕 */
.cube span:nth-child(2) {
  background: url(../images/newyorkCity.jpg) no-repeat right/auto 105%;
  /* y축 회전 + z축이동 */
  transform: rotateY(90deg)
    translateZ(calc(var(--cube-size) / var(--divide-num)));
}
/* 3.뒷면 파리*/
.cube span:nth-child(3) {
  background: url(../images/parisCity.jpg) no-repeat center/cover;
  transform: rotateY(180deg)
    translateZ(calc(var(--cube-size) / var(--divide-num)));
}
/* 4.왼쪽면 메인*/
.cube span:nth-child(4) {
  background: url(../images/cityMain.jpg) no-repeat center/cover;
  transform: rotateY(-90deg)
    translateZ(calc(var(--cube-size) / var(--divide-num)));
}
/* 5.윗면 시티즈*/
.cube span:nth-child(5) {
  background: url(../images/citys.jpg) no-repeat center/cover;
  transform: rotateX(90deg)
    translateZ(calc(var(--cube-size) / var(--divide-num)));
}
/* 4.아랫면 런던*/
.cube span:nth-child(6) {
  background: url(../images/London_city.jpg) no-repeat center/cover;
  transform: rotateX(-90deg)
    translateZ(calc(var(--cube-size) / var(--divide-num)));
}

/* 큐브애니메이션 클래스 */
.rotate-cube {
  /* 애니메이션 : 이시이지반방마 */
  animation: cube-ani 3s linear infinite;
  /* 처음에 멈춰있음 */
  animation-play-state: paused;
  /* paused (멈춤상태)
    running (작동상태-기본값) */
}

/* 애니메이션 작동 클래스(.on)  */
.rotate-cube.on {
  animation-play-state: running;
}

/* 큐브애니메이션 키프레임 */
@keyframes cube-ani {
  to {
    transform: rotateX(370deg) rotateY(390deg);
    /* 
            x축 양의 방향으로 10도에서 출발
            양의 방향 360도+10도=370도
            음의 방향 -360도+10도=-350도
            ____________________________

            y축 양의 방향으로 30도에서 출발
            양의 방향 360도+30도=390도
            음의 방향 -360도+30도=-330도
        */
  }
} /* 키프레임 */
